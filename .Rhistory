if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777779
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777771
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777773
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777717
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777719
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777715
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
x = 777713
i = 2
while(i<=x) {
if(x%%i==0 && x!=i) {
cat(x, " is not a prime number as it can be divded by ", i)
break
}
if(x==i) {
cat(x, " is a prime number.")
break
}
else {
i=i+1
}
}
setwd("~/lee/Study/Projects/Breast Cancer")
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(0, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(0, length(cp))
accuracy
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
accuracy
accuracy
cp
accuracy <- rep(0, length(cp))
accuracy
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
best_cp
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 2),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 2),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 2),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, 1:16])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-c(test), ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, c(1:16)])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerData.csv")
cancer_data[, 1:16] <- lapply(cancer_data[, 1:16], scale)
n <- dim(cancer_data)[1]
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
cp <- 10^(-5:5)
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
train <- cancer_data[-c(test), ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
new_data <- data.frame(cancer_data[test, c(1:16)])
dt_pred <- predict(dt_model, new_data, type = "class")
correct <- correct + sum(dt_pred == cancer_data[test, 17])
}
accuracy[i] <- correct / n
}
plot(log(cp, base = 10), accuracy, type = "b")
#best_cp <- cp[which(accuracy == max(accuracy))]
#dt_model <- rpart(overall_survival ~ .,
#                  method = "class", data = cancer_data,
#                  control = rpart.control(cp = best_cp, minsplit = 1),
#                  parms = list(split = "information"))
#rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
#           varlen = 0, faclen = 0)
library(rpart)
library(rpart.plot)
library(rpart)
library(rpart.plot)
cancer_data <- read.csv("CancerDataV2.csv")
cancer_data[, 1:15] <- lapply(cancer_data[, 1:15], scale)
n <- dim(cancer_data)[1]
# 10 Fold Cross Validation
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
# 10 different values for Complexity Parameter
cp <- 10^(-5:5)
# 10 different values of accuracy for each CP
accuracy <- rep(1, length(cp))
for (i in 1:10) {
correct <- 0
for (j in 1:n_folds) {
test <- which(folds_j == j)
test_x <- cancer_data[test, 1:15]
test_y <- cancer_data[test, 16]
train <- cancer_data[-test, ]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = train,
control = rpart.control(cp = cp[i], minsplit = 1),
parms = list(split = "information"))
dt_pred <- predict(dt_model, newdata = test_x, type = "class")
correct <- correct + sum(dt_pred == test_y)
}
accuracy[i] <- correct / n
}
# Plot graph of complexity parameter against accuracy
plot(log(cp, base = 10), accuracy, type = "b")
# Using best complexity parameter
best_cp <- cp[which(accuracy == max(accuracy))]
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(cp = best_cp, minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
# Normal plotting
dt_model <- rpart(overall_survival ~ .,
method = "class", data = cancer_data,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
# Ranked in order of Accuracy: LR > DT > GLM > KNN > NB
library(class)              # K-Nearest Neighbour
library(rpart)              # Decision Tree
library(rpart.plot)         # Decision Tree
library(e1071)              # Naive Bayes
# Ranked in order of Accuracy: LR > DT > GLM > KNN > NB
library(class)              # K-Nearest Neighbour
library(rpart)              # Decision Tree
library(rpart.plot)         # Decision Tree
library(e1071)              # Naive Bayes
library(dplyr)              # Logistic Regression
cancer_data <- read.csv("CancerDataV2.csv")
cancer_data[, 1:15] <- lapply(cancer_data[, 1:15], scale)
n <- dim(cancer_data)[1]
# Seed 2022
set.seed(2022)
# 10-Fold Cross Validation
n_folds <- 10
folds_j <- sample(rep(1:n_folds, length.out = n))
# Accuracy vector: c(LR, KNN, DT, NB, GLM)
accuracy <- c(0, 0, 0, 0, 0)
for (j in 1:n_folds) {
test <- which(folds_j == j)
test_x <- cancer_data[test, 1:15]
test_y <- cancer_data[test, 16]
train <- cancer_data[-test, ]
train_x <- cancer_data[-test, 1:15]
train_y <- cancer_data[-test, 16]
# Linear Regression
lm_model <- lm(overall_survival ~ ., data = cancer_data)
lm_pred <- predict(lm_model, newdata = test_x) > 0.5
accuracy[1] <- accuracy[1] + sum(lm_pred == test_y)
# K-Nearest Neighbour
knn_pred <- knn(train_x, test_x, train_y, k = 30)
accuracy[2] <- accuracy[2] + sum(knn_pred == test_y)
# Decision Tree
dt_model <- rpart(overall_survival ~ ., method = "class", data = train,
control = rpart.control(minsplit = 1),
parms = list(split = "information"))
if (j == 0) {
rpart.plot(dt_model, type = 4, extra = 2, clip.right.labs = FALSE,
varlen = 0, faclen = 0)
}
dt_pred <- predict(dt_model, newdata = test_x, type = "class")
accuracy[3] <- accuracy[3] + sum(dt_pred == test_y)
# Naive Bayes
nb_model <- naiveBayes(overall_survival ~ ., data = train)
nb_pred <- predict(nb_model, newdata = test_x)
accuracy[4] <- accuracy[4] + sum(nb_pred == test_y)
# Logistic Regression
glm_model <- glm(overall_survival ~ ., data = train)
glm_pred <- predict(glm_model, newdata = test_x) > 0.5
accuracy[5] <- accuracy[5] + sum(glm_pred == test_y)
}
accuracy <- accuracy / n
print(accuracy)
